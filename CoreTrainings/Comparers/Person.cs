using System;

namespace Comparers
{
    public class Person // : IEquatable<Person>
    {
        public Person(int id, DateTime birthDate)
        {
            Id = id;
            BirthDate = birthDate;
        }

        public int Id { get; }

        public DateTime BirthDate { get; }

        public string Name { get; set; }

        public DateTime CreatedOn { get; set; }

        public bool IsActive { get; set; }

        // Autogenerated by ReSharper
        public bool Equals(Person other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return Id == other.Id && Name == other.Name && CreatedOn.Equals(other.CreatedOn) && IsActive == other.IsActive;
        }

        // Autogenerated by ReSharper
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((Person) obj);
        }

        // Autogenerated by ReSharper
        // Properties using in calculating Hashcode should be readonly
        public override int GetHashCode()
        {
            return HashCode.Combine(Id, BirthDate);
        }

        public static bool operator ==(Person person, Person persomToCompare)
        {
            return person.Equals(persomToCompare);
        }

        public static bool operator !=(Person person, Person persomToCompare)
        {
            return !person.Equals(persomToCompare);
        }
    }

}
